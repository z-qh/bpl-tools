// Generated by gencpp from file Base_control/ControlCmdRequest.msg
// DO NOT EDIT!


#ifndef BASE_CONTROL_MESSAGE_CONTROLCMDREQUEST_H
#define BASE_CONTROL_MESSAGE_CONTROLCMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Base_control
{
template <class ContainerAllocator>
struct ControlCmdRequest_
{
  typedef ControlCmdRequest_<ContainerAllocator> Type;

  ControlCmdRequest_()
    : xx(0)
    , yy(0)  {
    }
  ControlCmdRequest_(const ContainerAllocator& _alloc)
    : xx(0)
    , yy(0)  {
  (void)_alloc;
    }



   typedef int32_t _xx_type;
  _xx_type xx;

   typedef int32_t _yy_type;
  _yy_type yy;





  typedef boost::shared_ptr< ::Base_control::ControlCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Base_control::ControlCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ControlCmdRequest_

typedef ::Base_control::ControlCmdRequest_<std::allocator<void> > ControlCmdRequest;

typedef boost::shared_ptr< ::Base_control::ControlCmdRequest > ControlCmdRequestPtr;
typedef boost::shared_ptr< ::Base_control::ControlCmdRequest const> ControlCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Base_control::ControlCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Base_control::ControlCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace Base_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'Base_control': ['/home/qh/robot_ws/src/Base_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Base_control::ControlCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Base_control::ControlCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Base_control::ControlCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9389ac2bbf68bfe26330b62bb900a172";
  }

  static const char* value(const ::Base_control::ControlCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9389ac2bbf68bfe2ULL;
  static const uint64_t static_value2 = 0x6330b62bb900a172ULL;
};

template<class ContainerAllocator>
struct DataType< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Base_control/ControlCmdRequest";
  }

  static const char* value(const ::Base_control::ControlCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 xx\n\
int32 yy\n\
";
  }

  static const char* value(const ::Base_control::ControlCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xx);
      stream.next(m.yy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Base_control::ControlCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Base_control::ControlCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "xx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xx);
    s << indent << "yy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_CONTROL_MESSAGE_CONTROLCMDREQUEST_H
